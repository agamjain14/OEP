CREATE TABLE USERS ( 
USER_ID NUMBER(10),
USER_FNAME VARCHAR2(20),
USERNAME VARCHAR2(40) ,
USER_PASSWORD VARCHAR2(65),
USER_EMAIL VARCHAR2(40) NOT NULL ,
USER_MOBILE_NO NUMBER(10) NOT NULL ,
USER_ROLE VARCHAR2(10) DEFAULT 'NUSER',
USER_STATUS VARCHAR2(10) DEFAULT 'INACTIVE',
CONSTRAINT CHK_TYPE CHECK (USER_ROLE IN ('NUSER','ADMIN')),
CONSTRAINT CHK_STATUS CHECK (USER_STATUS IN ('ACTIVE','INACTIVE')),
CONSTRAINT UNAME_UN UNIQUE (USERNAME),
CONSTRAINT UMOBILE_UN UNIQUE (USER_MOBILE_NO),
CONSTRAINT UEMAIL_UN UNIQUE (USER_EMAIL),
CONSTRAINT PK_USER_ID PRIMARY KEY (USER_ID) );



CREATE TABLE COURSE(
COURSE_ID NUMBER(10),
COURSE_NAME VARCHAR2(20),
COURSE_DESCRIPTION VARCHAR2(50),
COURSE_NO_QUESTIONS NUMBER(3),
COURSE_PASSING_SCORE NUMBER(3) NOT NULL,
CONSTRAINT CHK_SCORE CHECK(COURSE_PASSING_SCORE BETWEEN 0 AND 101),
CONSTRAINT PK_COURSE_ID PRIMARY KEY (COURSE_ID) );



CREATE TABLE QUESTIONS(
QUESTION_ID NUMBER(10),
COURSE_ID NUMBER(10),
QUESTION_DESCRIPTION VARCHAR2(40),
QUESTION_ANSWER VARCHAR2(50),
QUESTION_OPTIONA VARCHAR2(50),
QUESTION_OPTIONB VARCHAR2(50),
QUESTION_OPTIONC VARCHAR2(50),
QUESTION_OPTIOND VARCHAR2(50),
QUESTION_STATUS VARCHAR2(10),
CONSTRAINT CHK_QSTATUS_Q CHECK (QUESTION_STATUS IN ('ACTIVE','EXPIRED')),
CONSTRAINT PK_QUESTION_ID PRIMARY KEY (QUESTION_ID),
CONSTRAINT FK_COURSE_ID FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID)
);




CREATE TABLE RESULTS(
RESULT_ID NUMBER(10),
COURSE_ID NUMBER(10),
USER_ID NUMBER(10),
RESULT_SCORE NUMBER(10),
RESULT_STATUS VARCHAR2(10),
RESULT_DATE DATE,
CONSTRAINT PK_RESULT_ID PRIMARY KEY (RESULT_ID),
CONSTRAINT CHK_STATUS_R CHECK (RESULT_STATUS IN ('PASS','FAIL')),
CONSTRAINT FK_USER_ID_R FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
CONSTRAINT FK_COURSE_ID_R FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID));






ALTER TABLE COURSE
ADD CONSTRAINT UNIQUE_course_Name UNIQUE (course_name);



CREATE TABLE ENROLL(
ENROLL_ID NUMBER(10),
COURSE_ID NUMBER(10),
USER_ID NUMBER(10),
CONSTRAINT PK_ENROLL_ID PRIMARY KEY (ENROLL_ID),
CONSTRAINT FK_ENROLL_CID FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID),
CONSTRAINT FK_EBROLL_UID FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
CONSTRAINT ENR_unique UNIQUE (COURSE_ID, USER_ID));





CREATE SEQUENCE user_seq START WITH 1001;

CREATE OR REPLACE TRIGGER user_seq_trig
BEFORE INSERT ON users
FOR EACH ROW

BEGIN
  SELECT user_seq.NEXTVAL
  INTO :new.user_id
  FROM DUAL;
END;



CREATE SEQUENCE course_seq START WITH 2001;

CREATE OR REPLACE TRIGGER course_seq_trig
BEFORE INSERT ON course
FOR EACH ROW

BEGIN
  SELECT course_seq.NEXTVAL
  INTO :new.course_id
  FROM DUAL;
END;




CREATE SEQUENCE ques_seq START WITH 3001;

CREATE OR REPLACE TRIGGER ques_seq_trig
BEFORE INSERT ON questions
FOR EACH ROW

BEGIN
  SELECT ques_seq.NEXTVAL
  INTO :new.question_id
  FROM DUAL;
END;




CREATE SEQUENCE test_seq START WITH 9001;

CREATE OR REPLACE TRIGGER test_seq_trig
BEFORE INSERT ON tests
FOR EACH ROW

BEGIN
  SELECT test_seq.NEXTVAL
  INTO :new.test_id
  FROM DUAL;
END;




CREATE SEQUENCE result_seq START WITH 11001;

CREATE OR REPLACE TRIGGER _seq_trig
BEFORE INSERT ON tests
FOR EACH ROW

BEGIN
  SELECT result_seq.NEXTVAL
  INTO :new.result_id
  FROM DUAL;
END;



CREATE OR REPLACE TRIGGER enroll_seq_trig
BEFORE INSERT ON enroll
FOR EACH ROW

BEGIN
  SELECT enroll_seq.NEXTVAL
  INTO :new.enroll_id
  FROM DUAL;
END;

alter table Users  modify( user_role varchar2(10) default 'ACTIVE' );
